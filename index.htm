<!DOCTYPE html>
<html>

  <head>
    <meta name="2D Gaussian inference" content="a basic example for 2-D Gaussian inference">
    <title>2D Gaussian inference</title>
    <script src="https://unpkg.com/mathjs/lib/browser/math.js"></script>
    
    <script src="https://d3js.org/d3.v4.min.js"></script>
    <script src="https://d3js.org/d3-hsv.v0.1.min.js"></script>
    <script src="https://d3js.org/d3-contour.v1.min.js"></script>
  </head>
  
  <!-- Create a div where the graph will take place -->
<div id="my_dataviz">
  <svg id="click" xmlns="http://www.w3.org/2000/svg">
      <defs>
          <g id="pointer" transform="scale(0.5)">
              <circle cx="0" cy="0" r="20" id="dragcircle" />
          </g>
      </defs>
  </svg>
</div>

<!-- Create a div where the graph will take place -->

  <body>
    <script>
    
    // ===================================================
    // Set up basic viewport options
    // ===================================================
    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0)
    const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)
      
    var height 	= math.min([vw,vh])*0.95; // 450
    var width 	= math.min([vw,vh])*0.95;

    var height_offset = 0.05*height
    var width_offset = 0.05*width
    
    var svg = d3.select("#click") // This selects the div
    .attr("width", width) // This defines the canvas' width
    .attr("height", height) // This defines the canvas' height
    
    var xrange 	= [-3,3];
    var yrange 	= [-3,3];

    // Create some basic 2D random variables
    
    var cov_obs 	= [[0.25,0],[0,0.25]];
    
    var mu 				= [[0],[0]];
    var cov 			= [[1,0],[0,1]];

		const t = d3.transition()
    	.duration(750)
    	.ease(d3.easeLinear);
      
      x_limits = xrange
      y_limits = yrange

      window_x 	= [width*0.12,width*0.95];
      window_y 	= [height*0.02,height*0.89];
      
      // Get scaling functions for the x scale and the y_scale
      const xScale = d3.scaleLinear()
        .domain([x_limits[0],x_limits[1]])
        .range(window_x)
      const xScale_inverse = d3.scaleLinear()
        .domain(window_x)
        .range([x_limits[0],x_limits[1]])
      const yScale = d3.scaleLinear()
        .domain([y_limits[0],y_limits[1]])
        .range([window_y[1],window_y[0]])

      // Draw the x axis
      svg
        .append("g")
        .attr("transform", "translate(0,"+window_y[1].toString()+")")
        .call(d3.axisBottom(xScale))
        .style("font-size", (16*width/600).toString()+"px")
      svg.append("text")             
          .attr("transform",
                "translate("+(math.mean(window_x)).toString()+","+(height*0.99).toString()+")")
          .style("text-anchor", "middle")
          .text("x coordinate")
          .style("font-family", "arial")
          .style("font-size", (16*width/600).toString()+"px")
          
      
      // Draw the y axis
      svg
        .append("g")
        .attr("transform", "translate("+(window_x[0]).toString()+",0)")
        .attr("id","mainxaxis")
        .call(d3.axisLeft(yScale))
        .style("font-size", (16*width/600).toString()+"px");
        //.call(d3.axisLeft(yScale).tickFormat(""));
      svg.append("text")             
          .attr("transform",
                "translate("+(width*0.02).toString()+","+(math.mean(window_y)).toString()+") rotate(270)")
          .style("text-anchor", "middle")
          .text("y coordinate")
          .style("font-family", "arial")
          .style("font-size", (16*width/600).toString()+"px")










    // Get coordinates for the prior blob
    //mu_pos 	= values_to_pixels(mu_prior);
    //radius  = math.sqrt(cov_prior[0][0])/(xrange[1]-xrange[0])*width;

		svg.append('line')
    	.style("stroke", "grey")
    	.style("stroke-width", 3*height/450)
    	.attr("x1", 0)
    	.attr("y1", 0)
    	.attr("x2", 200)
    	.attr("y2", 200)
      .attr("opacity", 0.)
      .attr("id","compromise_line");

    // Plot the prior
    svg.append("circle")
      .attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
      .attr("cx", values_to_pixels(mu[0][0],'x'))
      .attr("cy", values_to_pixels(mu[1][0],'y'))
      .attr("fill", "none")
      .attr("stroke", "#666666")
      .attr("opacity", 0.75)
      .attr("stroke-width", 2.5*height/450)
      .attr("stroke-dasharray", ("3, 3"))
      .attr("id","prior");

    // Plot the posterior
    svg.append("circle")
      .attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
      .attr("cx", values_to_pixels(mu[0][0],'x'))
      .attr("cy", values_to_pixels(mu[1][0],'y'))
      .attr("fill", "#c1f80a")
      .attr("stroke", "#666666")
      .attr("opacity", 0.)
      .attr("stroke-width", 2.5*height/450)
      .attr("id","posterior");

    // Plot the observation
    svg.append("circle")
      .attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
      .attr("cx", values_to_pixels(mu[0][0],'x'))
      .attr("cy", values_to_pixels(mu[1][0],'y'))
      .attr("fill", "#047495")
      .attr("stroke", "#666666")
      .attr("opacity", 0.)
      .attr("stroke-width", 2.5*height/450)
      .attr("id","observation");





      // On Click, we want to add data to the array and chart
      svg.on("click", function() {
      
      	// Check where the user just clicked
        var coords = d3.mouse(this);
        
        // Check whether the user clicked inside or outside the plot
        // If we the user clicked inside, do a Bayesian update
        if ((coords[0] > window_x[0] && coords[0] <= window_x[1]) && (coords[1] > window_y[0] && coords[1] <= window_y[1])) {
        
        
        obs 	= pixels_to_values(coords);
        obs 	= [[obs[0]],[obs[1]]];
        
				d3.select("#observation")
        	.attr("r", math.sqrt(cov_obs[0][0])/(xrange[1]-xrange[0])*width)
          .attr("cx", coords[0])
          .attr("cy", coords[1])
          .attr("opacity", 0.75)
        
				d3.select("#prior")
        	.attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
          .attr("cx", values_to_pixels(mu[0][0],'x'))
          .attr("cy", values_to_pixels(mu[1][0],'y'))
          
        d3.select("#compromise_line")
        	.attr("x1", coords[0])
          .attr("y1", coords[1])
        	.attr("x2", values_to_pixels(mu[0][0],'x'))
          .attr("y2", values_to_pixels(mu[1][0],'y'))
          .attr("opacity",0.75)
        
        // Calculate posterior mean
        mu 	= math.subtract(
        	mu,
          math.multiply(
          	cov,
            math.inv(math.add(cov,cov_obs)),
            math.subtract(mu,obs)));

        // Calculate posterior covariance
        cov = math.subtract(
        	cov,
          math.multiply(
            cov,
            math.inv(math.add(cov,cov_obs)),
            cov));

        



				d3.select("#posterior")
          .transition()
          	.duration(750)
            .ease(d3.easeLinear)
        	.attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
          .attr("cx", values_to_pixels(mu[0][0],'x'))
          .attr("cy", values_to_pixels(mu[1][0],'y'))
          .attr("opacity",0.75)
        
        // Otherwise, reset the plot
        } else {
        
        	// Reset the prior
    			mu 				= [[0],[0]];
    			cov 			= [[1,0],[0,1]];
          
          // Reset the variables
          d3.select("#observation")
            .attr("opacity", 0.)

          d3.select("#prior")
            .attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
            .attr("cx", values_to_pixels(mu[0][0],'x'))
            .attr("cy", values_to_pixels(mu[1][0],'y'))
            
          d3.select("#posterior")
            .attr("r", math.sqrt(cov[0][0])/(xrange[1]-xrange[0])*width)
            .attr("cx", values_to_pixels(mu[0][0],'x'))
            .attr("cy", values_to_pixels(mu[1][0],'y'))
            .attr("opacity",0.)

          d3.select("#compromise_line")
            .attr("opacity",0.)
        
        
        }
         
        })
    
    
    // helper function to output formatted results.
    function print(value) {
      var precision = 14;
      document.write(math.format(value, precision) + '<br>');
    }
    
    
    function pixels_to_values(coords,axis) {
    	axis = (typeof axis === 'undefined') ? 'xy' : axis;
    	if (axis == 'x') {
      	res = coords/width * (xrange[1]-xrange[0]) + xrange[0]
      } else if (axis == 'y') {
      	res = (1.-coords/height) * (yrange[1]-yrange[0]) + yrange[0]
      } else {
      	res = [coords[0]/width * (xrange[1]-xrange[0]) + xrange[0],(1.-coords[1]/height) * (yrange[1]-yrange[0]) + yrange[0]]
      }
     	return res;
    }

    function values_to_pixels(values,axis) {
    	axis = (typeof axis === 'undefined') ? 'xy' : axis;
    	if (axis == 'x') {
      	res = (values-xrange[0])/(xrange[1]-xrange[0])*width;
      } else if (axis == 'y') {
      	res = (1-(values-yrange[0])/(yrange[1]-yrange[0]))*height;
      } else {
      	res = [(values[0]-xrange[0])/(xrange[1]-xrange[0])*width,(1-(values[1]-yrange[0])/(yrange[1]-yrange[0]))*height];
      }
     	return res;
    }


    </script>
  </body>

</html>
